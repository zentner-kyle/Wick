#! /usr/bin/env python3
# encoding: utf-8

from waflib.TaskGen import feature, after
from waflib.Task import Task

class Strip(Task):
    run_str = 'strip -s ${SRC}'
    color   = 'BLUE'

@feature('strip')
@after('cshlib')
def strip(self):
    libs = [task.outputs[0] for task in self.tasks]
    if libs:
        self.create_task('Strip', libs)

def options(opt):
    pass

def configure(conf):
    pass

def build(bld):
    bld.program (
        source = 'scratch.c',
        target = 'scratch',
        use = 'wick',
        includes = '.',
        rpath = '$ORIGIN',
    )
    
    lib_features = ['c', 'cshlib']

    wick_sources = [
        'walloc.c',
        'warray_wval.c',
        'wast.c',
        'wbits.c',
        'wbuiltins.c',
        'wcall.c',
        'werror.c',
        'whash.c',
        'wparse.c',
        'wstr.c',
        'wstr_trie.c',
        'wtable_wval.c',
        'wtoken.c',
        'wtype.c',
        'wutf8.c',
        'wint_trie.c',
    ]

    if bld.variant == 'micro':
        lib_features.append('strip')
        to_remove = [
            'wast.c',
            'wparse.c',
            'wstr_trie.c',
            'wtoken.c',
            'wutf8.c',
            'wint_trie.c',
            ]
        for source in to_remove:
            wick_sources.remove(source)

    bld.objects(
        source   = 'wvm.c',
        target   = 'wvm_core',
        cflags   = '-fno-gcse' if bld.env['use_no_gcse_for_core'] else '',
        includes = '.',
        )
    
    bld.objects(
        source = wick_sources,
        target = 'wick_objects',
        includes = '.',
    )
    
    bld(
        features = lib_features,
        use    = 'wick_objects wvm_core',
        target = 'wick',
    )

    bld.program(
        source = 'main.c',
        target = 'wick0',
        includes = '.',
        use = 'wick',
        rpath = '$ORIGIN',
    )

    from os.path import join
    bld(
        rule = 'python ${SRC} ${TGT} ' + join(bld.top_dir,
            'deps/UCD/extracted/DerivedGeneralCategory.txt' ),
        source = 'unicode_gen.py',
        target = 'is_letter_tree.c',
    )
