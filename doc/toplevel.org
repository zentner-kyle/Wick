This is the top level design of Wick's internals and interaction with external C code.

Serious difficulties / constraints:
	STM
	Error reporting via channel
	Controlled (limited) execution
	Close embedding with external machine code (C)


structs

refs
	contain a non-null pointer to a segment

vm
	allocation: dynamic
	contains: 
		scheduler
		garbage collector
		commit manager
		parser
		compiler
		loader
		ref to global context
	methods:
		load(text) -> code: gets and AST from parser, then compiles it and loads it
		run(code, segment) -> dynamic result: evaluate in code with segment in global context


parser
	growing circular queue of token pointers (used to build up AST)
	hashtable for uniquing tokens
	methods:
		parse(text) -> AST:
			parses text into an AST


compiler
	AST -> ATG


loader
	(nothing for now, since ATG = code)
	ATG -> code


thread
	host level thread
	active task


task
	parent task
	List of child tasks
	current transaction
	resource monitor


transaction
	ptr to parent transaction
	write Map
	read false-positive set (bloomfilter)


scheduler
	List of active tasks
	List of active threads
	List of changed joins
	List of active joins


commit manager
	active transactions
	commit lock


garbage collector
	state (marking, sweeping)


context
	allocation: dynamic
	error channel
	out channel
	in channel
	self channel
	pointer to current segment
	pointer to current code
	index into code
	ref to transaction


channel
	List of refs to joins
	default send type

segment
	headers
		type header (pointer to segment info)
		gc header (uint32_t ?)
	fields

segment_info
	allocation: dynamic only
	headers
	symbol segment_id
	size_t segment_size
	pointer to segment info segment_type
		alien:
			External data, nothing known about it, do not touch
			Note: alien segments do not have headers!
		pointer:
			Implies that the segment is a pointer to another segment
			sub-segment Note: stored locally here
		base:
			Implies the this segment_info represents inlined storage of an opaque type
			pass
		composite:
			Implies that the segment is _always_ _composed_ of certain sub-segments in an order
			Note that the sub-segments are not implicitly pointers, even if they themselves are composites.
			List of pointers to sub-segments (in index order)
			symbol -> index Map
		dynamic:
			Implies that there is a data structure used to implement dynamic behavior
			(data structure used in object to implement dynamic?)
			pass
		variant:
			Implies that the segment begins with a pointer to a segment_info node, followed by a corresponding segment
			List of possible sub-segments, no particular order
		variable:
			Implies that the segment has not actually been bound yet.
			symbol, the name of the variable
		parametric:
			Implies that the segment's form is dependent
			symbol -> segment Map, if none of the segments in this map are (variables or non-bound / free), then the segment is bound (non-free)
		abstract:
			Implies that the segment should not be considered to have a value, but is instead only a carrier of a type
			sub-segment type :: *segment_info


The segment_info node for segment_info looks like:

::segment_info = {
		headers {
			gc_header
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "segment_info"}
		segment_size = _
		segment_type = &composite
		[&::&symbol, &::size_t, &segment_info_variant]
	}

segment_info_variant =  {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "anonymous"}
		segment_size = _
		segment_type = &variant
		[&alien, &pointer, &base, &composite, &dynamic, &variant, &variable, &abstract]
	}

alien = {
		headers{
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "alien"}
		segment_size = 0 # There is no more info in the parent segment_info
		segment_type = &base
	}

pointer = {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "pointer"}
		segment_size = sizeof(segment_info*) # There is one pointer worth of space in the parent segment_info
		segment_type = &pointer # Wow. This is correct.
		sub_segment_type = &segment_info
	}

base = {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "base"}
		segment_size = 0 # There is no more info in the parent segment_info
		segment_type = &base
	}

composite = {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "composite"}
		segment_size = sizeof(List) + sizeof(Map)
		segment_type = &composite
		sub_segments = [&List<segment_info>, &Map<symbol, size_t>]
	}

dynamic = {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "dynamic"}
		segment_size = sizeof(Map)?
		segment_type = &base
	}

variant = {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "variant"}
		segment_size = sizeof(segment_info*) + max(sizeof(option) for option in sub_segments)
		segment_type = &composite
		sub_segments = [List<&segment_info>]
	}

variable = {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "variable"}
		segment_size = sizeof(symbol)
		segment_type = &composite
		sub_segments = [::*symbol]
	}

variable = {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "abstract"}
		segment_size = sizeof(Map<symbol, segment_info>)
		segment_type = &composite
		sub_segments = [&Map<symbol, segment_info>]
	}

::symbol = {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &{0x_, 0x_, "symbol"}
		segment_type = &composite
		sub_segments = [&::Id, &::String]
	}

::String = {
		headers {
			gc_headers
			segment = &segment_info
		}
		symbol = &Symbol("String")
		segment_type = &composite
		sub_segments = [&::Hash, &::Pointer(char), &::Size_t]
	}


Compositions:
	& (intersection)
	| (union)	
	! (mutate)
	^ (exclusion)
	\ (removal?)
	phi (join)

intersection:
	Mostly useful for extraction
	Things like
	Vector3 = {\x, \y, \z}
	Vector2 = {\x, \y}
	v3 = Vector3(1, 1, 1)
	v2 = v3 & Vector2

	Iter(Type) = {\deref :: Iter(Type) -> Type, \next :: Iter(Type) -> Maybe(Iter(Type))}
	Sequence(Type) = {\iterator :: -> Iter(Type), \valid_iterator :: Iter(Type) -> Boolean}
	ArrayIter(Type) = Iter(Type) | {
		\index :: Size_t
		\parent :: Array(Type)
		next = (self) ->
			if self.parent valid_index(self.index):
				self | {index = self.index + 1}
		deref = (self) ->
			self.parent index(self.index)
	}
	Array(Type) = SequencePrint(Type) | Sequence(Type) | { 
		Pointer(Type) storage
		Size size
		Size fill
		valid_index ( self, index ) ->
			index < self.fill
		index ( self, index ) ->
			if self valid_index(index):
				*(storage + index)
	}


Map
	headers

	methods:
		hash
		insert(ctxt, k, v)
		lookup(ctxt, k)
		lookup_default(ctxt, k, default)
		contains?(ctxt, k)
		iterator(ctxt)

iterator
	headers
	container

	methods:
		current(ctxt) -> Elem
		next(ctxt) -> Maybe next_iter
		prev(ctxt) -> Maybe prev_iter
		parent(ctxt) -> Maybe collection
